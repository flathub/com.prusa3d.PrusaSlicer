From ee548e773b2e57e57f42443a9ef93a08cc7e6a00 Mon Sep 17 00:00:00 2001
From: Elia Devito <eliadevito@gmail.com>
Date: Tue, 21 Feb 2023 15:32:30 +0100
Subject: [PATCH] enable wayland

---
 deps/wxWidgets/wxWidgets.cmake |  2 +-
 src/PrusaSlicer.cpp            | 18 +++++++++---------
 2 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/deps/wxWidgets/wxWidgets.cmake b/deps/wxWidgets/wxWidgets.cmake
index 214a38139..92b0c502f 100644
--- a/deps/wxWidgets/wxWidgets.cmake
+++ b/deps/wxWidgets/wxWidgets.cmake
@@ -37,7 +37,7 @@ prusaslicer_add_cmake_project(wxWidgets
         -DwxUSE_EXPAT=sys
         -DwxUSE_LIBSDL=OFF
         -DwxUSE_XTEST=OFF
-        -DwxUSE_GLCANVAS_EGL=OFF
+        -DwxUSE_GLCANVAS_EGL=ON
         -DwxUSE_WEBREQUEST=OFF
 )
 
diff --git a/src/PrusaSlicer.cpp b/src/PrusaSlicer.cpp
index c5bbccb24..d473872e4 100644
--- a/src/PrusaSlicer.cpp
+++ b/src/PrusaSlicer.cpp
@@ -75,12 +75,12 @@ int CLI::run(int argc, char **argv)
     // Save the thread ID of the main thread.
     save_main_thread_id();
 
-#ifdef __WXGTK__
-    // On Linux, wxGTK has no support for Wayland, and the app crashes on
-    // startup if gtk3 is used. This env var has to be set explicitly to
-    // instruct the window manager to fall back to X server mode.
-    ::setenv("GDK_BACKEND", "x11", /* replace */ true);
-#endif
+// #ifdef __WXGTK__
+//     // On Linux, wxGTK has no support for Wayland, and the app crashes on
+//     // startup if gtk3 is used. This env var has to be set explicitly to
+//     // instruct the window manager to fall back to X server mode.
+//     ::setenv("GDK_BACKEND", "x11", /* replace */ true);
+// #endif
 
 	// Switch boost::filesystem to utf8.
     try {
@@ -659,9 +659,9 @@ int CLI::run(int argc, char **argv)
     #if !defined(_WIN32) && !defined(__APPLE__)
         // likely some linux / unix system
         const char *display = boost::nowide::getenv("DISPLAY");
-        // const char *wayland_display = boost::nowide::getenv("WAYLAND_DISPLAY");
-        //if (! ((display && *display) || (wayland_display && *wayland_display))) {
-        if (! (display && *display)) {
+        const char *wayland_display = boost::nowide::getenv("WAYLAND_DISPLAY");
+        // if (! (display && *display)) {
+        if (! ((display && *display) || (wayland_display && *wayland_display))) {
             // DISPLAY not set.
             boost::nowide::cerr << "DISPLAY not set, GUI mode not available." << std::endl << std::endl;
             this->print_help(false);
-- 
2.39.2

